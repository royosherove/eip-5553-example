{
  "abi": [
    {
      "inputs": [],
      "name": "getHolders",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "holder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Balance[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kind",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ledger",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "max",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "parentWork",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "getHolders()": "5fe8e7cc",
    "kind()": "04baa00b",
    "ledger()": "56397c35",
    "max()": "6ac5db19",
    "parentWork()": "1683252d"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getHolders\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Balance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kind\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ledger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parentWork\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getHolders()\":{\"details\":\"this array represt ALL past and current holders of the ERC20 underlying token, with current active balance this takes some work but it helps discover all holders of a royalty interest in a single logical place. see example implementation of this in SongRegistration.sol\",\"returns\":{\"_0\":\"an array of Balance structs : Balance {address holder, uint256 amount}\"}},\"ledger()\":{\"details\":\"i.e a registery or registrar, to be implemented in the future\",\"returns\":{\"_0\":\"the address of the contract or EOA that initialized the work registration that is the parent of this royalty interest\"}},\"parentWork()\":{\"details\":\"there is a 1-many relationship between a work and royalty interest tokens for example, 1 song work, might have two royualty interest tokens, one representing the writing side,and another token representing a recording side a royalty interest token can only belong to a single work, and once bound, can never change a parent\",\"returns\":{\"_0\":\"the address of the parent work that this royalty interest is bound to\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"kind()\":{\"notice\":\"returns a string representing what kind of ROyalty interest this is. i.e in the music business this might be \\\"Recording\\\" or \\\"Composition\\\" royalty interests\"},\"max()\":{\"notice\":\"returns a fixed amoutn of tokens that cannot be changed and represent 100% of the royalty interest for this token. i.e ideally you'd just return '100' here , where each token represents 1% of a royalty interest.\"}},\"notice\":\"an ERC20 that acts as a royalty interest token i.e we can use the holders of this token as a representation of who shoudl get how much % of any future money distribution in a licensing deal, for example\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IRoyaltyPortionToken.sol\":\"IRoyaltyPortionToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"contracts/interfaces/IRoyaltyPortionToken.sol\":{\"keccak256\":\"0x42b3120753c59a90bea6ef633babeb831001ea9120a9a88174710ec9006aaa36\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://3583e8c580f0df5e5fb6c9561dc378541e3e2a1eba88b3140de0fedd4eb832d7\",\"dweb:/ipfs/QmTT6LwEqfKyxAuidvRkaNBEs3hqcRpom8JNdrycQ2bDY9\"]},\"contracts/interfaces/Structs.sol\":{\"keccak256\":\"0x92cd5c464994b409bfd1285a0886ce8e1230a77319ecae51f3b5a32d428a931b\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://896ef8dfd31388528b6d3c9491e7162f318732c5fc1515b3b4559c4bad59e8c0\",\"dweb:/ipfs/QmZYc6txcEBSxacFUrQGBSzFo5fP5kYf5VHrY5YqNkUv8S\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getHolders",
          "outputs": [
            {
              "internalType": "struct Balance[]",
              "name": "",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "address",
                  "name": "holder",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "kind",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "ledger",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "max",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "parentWork",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "getHolders()": {
            "details": "this array represt ALL past and current holders of the ERC20 underlying token, with current active balance this takes some work but it helps discover all holders of a royalty interest in a single logical place. see example implementation of this in SongRegistration.sol",
            "returns": {
              "_0": "an array of Balance structs : Balance {address holder, uint256 amount}"
            }
          },
          "ledger()": {
            "details": "i.e a registery or registrar, to be implemented in the future",
            "returns": {
              "_0": "the address of the contract or EOA that initialized the work registration that is the parent of this royalty interest"
            }
          },
          "parentWork()": {
            "details": "there is a 1-many relationship between a work and royalty interest tokens for example, 1 song work, might have two royualty interest tokens, one representing the writing side,and another token representing a recording side a royalty interest token can only belong to a single work, and once bound, can never change a parent",
            "returns": {
              "_0": "the address of the parent work that this royalty interest is bound to"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "kind()": {
            "notice": "returns a string representing what kind of ROyalty interest this is. i.e in the music business this might be \"Recording\" or \"Composition\" royalty interests"
          },
          "max()": {
            "notice": "returns a fixed amoutn of tokens that cannot be changed and represent 100% of the royalty interest for this token. i.e ideally you'd just return '100' here , where each token represents 1% of a royalty interest."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=node_modules/@openzeppelin/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":eth-gas-reporter/=node_modules/eth-gas-reporter/",
        ":forge-std/=lib/forge-std/src/",
        ":hardhat/=node_modules/hardhat/",
        ":solmate/=lib/solmate/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 1000
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/interfaces/IRoyaltyPortionToken.sol": "IRoyaltyPortionToken"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/interfaces/IRoyaltyPortionToken.sol": {
        "keccak256": "0x42b3120753c59a90bea6ef633babeb831001ea9120a9a88174710ec9006aaa36",
        "urls": [
          "bzz-raw://3583e8c580f0df5e5fb6c9561dc378541e3e2a1eba88b3140de0fedd4eb832d7",
          "dweb:/ipfs/QmTT6LwEqfKyxAuidvRkaNBEs3hqcRpom8JNdrycQ2bDY9"
        ],
        "license": "Apache-2.0"
      },
      "contracts/interfaces/Structs.sol": {
        "keccak256": "0x92cd5c464994b409bfd1285a0886ce8e1230a77319ecae51f3b5a32d428a931b",
        "urls": [
          "bzz-raw://896ef8dfd31388528b6d3c9491e7162f318732c5fc1515b3b4559c4bad59e8c0",
          "dweb:/ipfs/QmZYc6txcEBSxacFUrQGBSzFo5fP5kYf5VHrY5YqNkUv8S"
        ],
        "license": "Apache-2.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/interfaces/IRoyaltyPortionToken.sol",
    "id": 930,
    "exportedSymbols": {
      "Balance": [
        936
      ],
      "IRoyaltyPortionToken": [
        929
      ],
      "RoyaltyTokenData": [
        961
      ],
      "SongMintingParams": [
        973
      ],
      "SplitInfo": [
        952
      ],
      "SplitTarget": [
        943
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:2060:6",
    "nodes": [
      {
        "id": 894,
        "nodeType": "PragmaDirective",
        "src": "39:23:6",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".9"
        ]
      },
      {
        "id": 895,
        "nodeType": "ImportDirective",
        "src": "64:23:6",
        "nodes": [],
        "absolutePath": "contracts/interfaces/Structs.sol",
        "file": "./Structs.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 930,
        "sourceUnit": 974,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 929,
        "nodeType": "ContractDefinition",
        "src": "309:1789:6",
        "nodes": [
          {
            "id": 902,
            "nodeType": "FunctionDefinition",
            "src": "526:54:6",
            "nodes": [],
            "documentation": {
              "id": 897,
              "nodeType": "StructuredDocumentation",
              "src": "346:175:6",
              "text": "@notice returns a string representing what kind of ROyalty interest this is.\n i.e in the music business this might be \"Recording\" or \"Composition\" royalty interests"
            },
            "functionSelector": "04baa00b",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "kind",
            "nameLocation": "535:4:6",
            "parameters": {
              "id": 898,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "539:2:6"
            },
            "returnParameters": {
              "id": 901,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 900,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 902,
                  "src": "565:13:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 899,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "565:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "564:15:6"
            },
            "scope": 929,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 908,
            "nodeType": "FunctionDefinition",
            "src": "822:47:6",
            "nodes": [],
            "documentation": {
              "id": 903,
              "nodeType": "StructuredDocumentation",
              "src": "586:231:6",
              "text": "@notice returns a fixed amoutn of tokens that cannot be changed and represent 100% of the royalty interest for this token.\n i.e ideally you'd just return '100' here , where each token represents 1% of a royalty interest."
            },
            "functionSelector": "6ac5db19",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "max",
            "nameLocation": "831:3:6",
            "parameters": {
              "id": 904,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "834:2:6"
            },
            "returnParameters": {
              "id": 907,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 906,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 908,
                  "src": "860:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 905,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "860:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "859:9:6"
            },
            "scope": 929,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 914,
            "nodeType": "FunctionDefinition",
            "src": "1084:50:6",
            "nodes": [],
            "documentation": {
              "id": 909,
              "nodeType": "StructuredDocumentation",
              "src": "875:204:6",
              "text": "@return the address of the contract or EOA that initialized the work registration that is the parent of this royalty interest\n @dev i.e a registery or registrar, to be implemented in the future"
            },
            "functionSelector": "56397c35",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "ledger",
            "nameLocation": "1093:6:6",
            "parameters": {
              "id": 910,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1099:2:6"
            },
            "returnParameters": {
              "id": 913,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 912,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 914,
                  "src": "1125:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 911,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1125:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1124:9:6"
            },
            "scope": 929,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 920,
            "nodeType": "FunctionDefinition",
            "src": "1579:54:6",
            "nodes": [],
            "documentation": {
              "id": 915,
              "nodeType": "StructuredDocumentation",
              "src": "1140:434:6",
              "text": "@return the address of the parent work that this royalty interest is bound to\n @dev there is a 1-many relationship between a work and royalty interest tokens\n for example, 1 song work, might have two royualty interest tokens, one representing the writing side,and another token representing a recording side\n a royalty interest token can only belong to a single work, and once bound, can never change a parent"
            },
            "functionSelector": "1683252d",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "parentWork",
            "nameLocation": "1588:10:6",
            "parameters": {
              "id": 916,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1598:2:6"
            },
            "returnParameters": {
              "id": 919,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 918,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 920,
                  "src": "1624:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 917,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1624:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1623:9:6"
            },
            "scope": 929,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 928,
            "nodeType": "FunctionDefinition",
            "src": "2033:63:6",
            "nodes": [],
            "documentation": {
              "id": 921,
              "nodeType": "StructuredDocumentation",
              "src": "1639:389:6",
              "text": "@return an array of Balance structs : Balance {address holder, uint256 amount}\n @dev this array represt ALL past and current holders of the ERC20 underlying token,\n with current active balance\n this takes some work but it helps discover all holders of a royalty interest in a single logical place.\n see example implementation of this in SongRegistration.sol"
            },
            "functionSelector": "5fe8e7cc",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getHolders",
            "nameLocation": "2042:10:6",
            "parameters": {
              "id": 922,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2052:2:6"
            },
            "returnParameters": {
              "id": 927,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 926,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 928,
                  "src": "2078:16:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Balance_$936_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct Balance[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 924,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 923,
                        "name": "Balance",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 936,
                        "src": "2078:7:6"
                      },
                      "referencedDeclaration": 936,
                      "src": "2078:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Balance_$936_storage_ptr",
                        "typeString": "struct Balance"
                      }
                    },
                    "id": 925,
                    "nodeType": "ArrayTypeName",
                    "src": "2078:9:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Balance_$936_storage_$dyn_storage_ptr",
                      "typeString": "struct Balance[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2077:18:6"
            },
            "scope": 929,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IRoyaltyPortionToken",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 896,
          "nodeType": "StructuredDocumentation",
          "src": "89:220:6",
          "text": "@notice  an ERC20 that acts as a royalty interest token\n i.e we can use the holders of this token as a representation of who shoudl get how much % of any future money distribution in a licensing deal, for example"
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          929
        ],
        "name": "IRoyaltyPortionToken",
        "nameLocation": "319:20:6",
        "scope": 930,
        "usedErrors": []
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 6
}